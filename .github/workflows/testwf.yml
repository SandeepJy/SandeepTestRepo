
name: Update PR with SonarQube Code Coverage

on:
  pull_request:
    branches:
      - main


jobs:
  setup:
    name: Update PR with SonarQube Coverage Data
    runs-on: macos-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Fastlane Setup
        id: fastlane_setup
        uses: ./.github/workflows/env.yml
        with:
          fastlane_subdir: "iOS"

      # Step to fetch code coverage from the mock URL
      - name: Fetch Code Coverage from Mock URL
        run: |
          curl -s "https://dummyjson.com/c/21bc-40bc-44b0-ad00" > coverage.json

      # Step to parse JSON and generate HTML content using jq
      - name: Parse JSON and Generate HTML Content
        id: generate_html
        run: |
          COVERAGE=$(jq -r '.component.measures[] | select(.metric=="coverage") | .value' coverage.json)
          NEW_LINE_COVERAGE=$(jq -r '.component.measures[] | select(.metric=="new_line_coverage") | .periods[0].value' coverage.json)
          HTML_CONTENT="<h1>Code Coverage Report</h1><p>Coverage: ${COVERAGE}%</p>"
          if [ "$NEW_LINE_COVERAGE" != "null" ]; then
            HTML_CONTENT+="<p>New Line Coverage: ${NEW_LINE_COVERAGE}</p>"
          fi
          echo "::set-output name=html_content::${HTML_CONTENT}"

      # Step to create or update the PR comment
      - uses: actions/github-script@v6
        with:
          script: |
            const repo = context.repo;
            const issue_number = context.issue.number;
            const htmlContent = '${{ steps.generate_html.outputs.html_content }}';

            // Fetch all comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number
            });

            // Find the comment with the unique marker
            const commentToUpdate = comments.find(comment => comment.body.includes('<!-- CODE_COVERAGE_COMMENT -->'));

            if (commentToUpdate) {
              // Update the existing comment
              await github.rest.issues.updateComment({
                owner: repo.owner,
                repo: repo.repo,
                comment_id: commentToUpdate.id,
                body: `<!-- CODE_COVERAGE_COMMENT -->\n${htmlContent}\n<a href="https://www.google.ca">www.google.ca</a>`
              });
            } else {
              // Create a new comment if the marker is not found
              await github.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                body: `<!-- CODE_COVERAGE_COMMENT -->\n${htmlContent}\n<a href="https://www.google.ca">www.google.ca</a>`
              });
            }

      # Step to add assignees
      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addAssignees({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              assignees: [context.actor]
            })
