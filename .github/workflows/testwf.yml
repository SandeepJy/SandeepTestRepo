
name: Update PR with SonarQube Code Coverage

on:
  pull_request:
    branches:
      - main


jobs:
  setup:
    name: Update PR with SonarQube Coverage Data
    runs-on: macos-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      # Step to fetch code coverage from the mock URL
      - name: Fetch Code Coverage from Mock URL
        run: |
          curl -s "https://dummyjson.com/c/1258-9916-40a0-a97e" > coverage.json

      # Step to parse JSON and generate HTML content using jq
      - name: Parse JSON and Generate HTML Content
        id: generate_html
        run: |
          COVERAGE=$(jq -r '.component.measures[] | select(.metric=="coverage") | .value' coverage.json)
          NEW_LINE_COVERAGE=$(jq -r '.component.measures[] | select(.metric=="new_line_coverage") | .periods[0].value' coverage.json)
          HTML_CONTENT="<h1>Code Coverage Report</h1><p>Coverage: ${COVERAGE}%</p>"
          if [ "$NEW_LINE_COVERAGE" != "null" ]; then
            HTML_CONTENT+="<p>New Line Coverage: ${NEW_LINE_COVERAGE}</p>"
          fi
          echo "::set-output name=html_content::${HTML_CONTENT}"

      # Step to create or update the PR comment
      - uses: actions/github-script@v6
        with:
          script: |
            const repo = context.repo;
            const issue_number = context.issue.number;
            const htmlContent = '${{ steps.generate_html.outputs.html_content }}';

            // Fetch all comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number
            });

            // Find the comment with the unique marker
            const commentToUpdate = comments.find(comment => comment.body.includes('<!-- CODE_COVERAGE_COMMENT -->'));

            if (commentToUpdate) {
              // Update the existing comment
              await github.rest.issues.updateComment({
                owner: repo.owner,
                repo: repo.repo,
                comment_id: commentToUpdate.id,
                body: `<!-- CODE_COVERAGE_COMMENT -->\n${htmlContent}\n<a href="https://www.google.ca">www.google.ca</a>`
              });
            } else {
              // Create a new comment if the marker is not found
              await github.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                body: `<!-- CODE_COVERAGE_COMMENT -->\n${htmlContent}\n<a href="https://www.google.ca">www.google.ca</a>`
              });
            }

      # Step to add assignees
      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addAssignees({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              assignees: [context.actor]
            })

jobs:
  fetch-coverage-and-update-pr:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
    # Step to checkout the repository
    - name: Checkout Repository
      uses: actions/checkout@v2

    # Step to authenticate with GitHub API (if needed)
    - name: Set up GitHub Token
      run: echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
      
    # Step to fetch code coverage from SonarQube (for demonstration, using a simple JSON response)
    - name: Fetch Code Coverage from SonarQube
      env:
        SONARQUBE_URL: 'https://your-sonarqube-instance.com'
        SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        PR_NUMBER: ${{ github.event.number }}
      run: |
        # For demonstration, using a dummy JSON response
        COVERAGE_DATA='{"component":{"measures":[{"metric":"coverage","value":"11.0"},{"metric":"branch_coverage","value":"70.0"},{"metric":"line_coverage","value":"90.0"}]}}'
        
        echo "COVERAGE_DATA=$COVERAGE_DATA" >> $GITHUB_ENV

    # Step to parse JSON data and generate HTML content
    - name: Generate HTML Report from Coverage Data
      id: generate_html
      env:
        COVERAGE_DATA: ${{ env.COVERAGE_DATA }}
      run: |
        coverage=$(echo "$COVERAGE_DATA" | jq -r '.component.measures[] | select(.metric == "coverage") | .value')
        branch_coverage=$(echo "$COVERAGE_DATA" | jq -r '.component.measures[] | select(.metric == "branch_coverage") | .value')
        line_coverage=$(echo "$COVERAGE_DATA" | jq -r '.component.measures[] | select(.metric == "line_coverage") | .value')

        html_content="<h1>Code Coverage Report</h1><p>Coverage: ${coverage}%</p><p>Branch Coverage: ${branch_coverage}%</p><p>Line Coverage: ${line_coverage}%</p>"
        
        echo "::set-output name=html_content::$html_content"

    # Step to update or create a comment on the PR using GitHub Script
    - name: Update or Create PR Comment with Code Coverage Data
      uses: actions/github-script@v6
      env:
        HTML_CONTENT: ${{ steps.generate_html.outputs.html_content }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const repo = context.repo;
          const pull_number = context.payload.pull_request.number;

          console.log(`Fetching comments for PR ${pull_number}`);

          // Fetch all comments on the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: repo.owner,
            repo: repo.repo,
            issue_number: pull_number
          });

          // Check if a comment with the unique marker exists
          const existingComment = comments.find(comment => comment.body.includes('<!-- CODE_COVERAGE_COMMENT -->'));

          const htmlContent = process.env.HTML_CONTENT;

          if (existingComment) {
            console.log(`Updating existing comment with ID: ${existingComment.id}`);
            await github.rest.issues.updateComment({
              owner: repo.owner,
              repo: repo.repo,
              comment_id: existingComment.id,
              body: `<!-- CODE_COVERAGE_COMMENT -->\n${htmlContent}\n <a href="https://www.google.ca">https://www.google.ca</a>`
            });
          } else {
            console.log('Creating new comment');
            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: pull_number,
              body: `<!-- CODE_COVERAGE_COMMENT -->\n${htmlContent}`
            });
          }
